Query all columns for all American cities in the CITY table with populations larger than 100000. 
The CountryCode for America is USA.
R//
SELECT * FROM CITY WHERE (POPULATION > 100000 AND COUNTRYCODE = 'USA')


Query the NAME field for all American cities in the CITY table with populations larger than 120000. 
The CountryCode for America is USA.
R//
SELECT NAME FROM CITY WHERE (POPULATION > 120000 AND COUNTRYCODE = 'USA');


Query all columns (attributes) for every row in the CITY table.
R//
SELECT * FROM CITY;


Query all columns for a city in CITY with the ID 1661.
R//
SELECT * FROM CITY WHERE ID = 1661;


Query all attributes of every Japanese city in the CITY table. 
The COUNTRYCODE for Japan is JPN.
R//
SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';


Query the names of all the Japanese cities in the CITY table. 
The COUNTRYCODE for Japan is JPN.
R//
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';


Query a list of CITY and STATE from the STATION table.
R//
SELECT CITY, STATE FROM STATION;


Query a list of CITY names from STATION for cities that have an even ID number. 
Print the results in any order, but exclude duplicates from the answer.
R//
SELECT DISTINCT CITY FROM STATION WHERE mod(ID,2)=0;


Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
R//
SELECT COUNT(CITY) - COUNT(DISTINCT(CITY)) FROM STATION;


Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
R//
SELECT top 1 CITY,MAX(LEN(CITY)) AS LENG FROM STATION GROUP BY CITY ORDER BY LENG DESC; 
SELECT top 1 CITY,MIN(LEN(CITY)) AS LENG FROM STATION GROUP BY CITY ORDER BY LENG ASC;


Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. 
Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '[aeiou]%'


Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%[aeiou]';

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%[aeiou]' AND CITY LIKE '[aeiou]%';


Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT LIKE '[aeiou]%';


Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT LIKE '%[aeiou]';


Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. 
Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT LIKE '[AEIOU]%' OR CITY NOT LIKE '%[AEIOU]';


Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. 
Your result cannot contain duplicates.
R//
SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT LIKE '%[aeiou]' AND CITY NOT LIKE '[aeiou]%';


Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
R//
SELECT Name FROM STUDENTS WHERE Marks > 75 ORDER BY RIGHT(Name,3), ID;


Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
R//
SELECT name FROM Employee ORDER BY name ASC


Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater
than  2000 per month who have been employees for less than 10 months. 
Sort your result by ascending employee_id.
R//
SELECT name FROM Employee WHERE salary > 2000 AND months < 10 ORDER BY employee_id ASC;


Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. 
Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
R//
SELECT CASE 
WHEN (A+B<=C OR B+C<=A OR C+A<=B) THEN 'Not A Triangle' 
WHEN (A=B AND B=C) THEN 'Equilateral' WHEN (A=B OR B=C OR A=C) THEN 'Isosceles' 
WHEN (A!=B AND B!=C AND A!=C) THEN 'Scalene' 
END 
FROM TRIANGLES;


Generate the following two result sets:
Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). 
For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. 
Sort the occurrences in ascending order, and output them in the following format: There are a total of [occupation_count] [occupation]s.
R//
SELECT CONCAT(Name,'(',LEFT(Occupation,1),')') FROM OCCUPATIONS ORDER BY Name;
SELECT CONCAT('There are a total of',' ',COUNT(Occupation),' ',LOWER(Occupation),'s.') 
FROM OCCUPATIONS GROUP BY Occupation ORDER BY COUNT(Occupation), Occupation;


Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. 
The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
Note: Print NULL when there are no more names corresponding to an occupation.
R//
WITH new_colums AS (
    SELECT *,
        RANK() OVER(PARTITION BY Occupation ORDER BY Name) AS puntua
    FROM OCCUPATIONS
)
SELECT 
    [Doctor] AS Doctor,
    [Professor] AS Professor,
    [Singer] AS Singer,
    [Actor] AS Actor
FROM new_colums
PIVOT (
    MAX(Name) FOR Occupation IN 
    ([Doctor], [Professor], [Singer], [Actor])
) AS t_pivot;


You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
R//
SELECT N , 
CASE WHEN P IS NULL THEN 'Root' 
WHEN P IS NOT NULL AND N IN(SELECT DISTINCT P FROM BST) THEN 'Inner' 
ELSE 'Leaf' 
END 
FROM BST ORDER BY N;


Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 
Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, 
total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
Note:
The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, 
then the ascending company_codes will be C_1, C_10, and C_2.
Input Format
The following tables contain company data:
Company: The company_code is the code of the company and founder is the founder of the company. 
Lead_Manager: The lead_manager_code is the code of the lead manager, and the company_code is the code of the working company. 
Senior_Manager: The senior_manager_code is the code of the senior manager, the lead_manager_code is the code of its lead manager, 
and the company_code is the code of the working company. 
Manager: The manager_code is the code of the manager, the senior_manager_code is the code of its senior manager, 
the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
Employee: The employee_code is the code of the employee, the manager_code is the code of its manager, 
the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, 
and the company_code is the code of the working company. 
R//
SELECT c.company_code, c.founder, 
COUNT(DISTINCT e.lead_manager_code),
COUNT(DISTINCT e.senior_manager_code),
COUNT(DISTINCT e.manager_code),
COUNT(DISTINCT e.employee_code)
FROM Company c
INNER JOIN Employee e ON e.company_code = c.company_code
GROUP BY c.company_code, c.founder;


Query a count of the number of cities in CITY having a Population larger than 100000.
R//
select count(NAME) from CITY where POPULATION > 100000


Query the total population of all cities in CITY where District is California.
R//
SELECT SUM(POPULATION) FROM CITY WHERE DISTRICT = 'California'


Query the average population of all cities in CITY where District is California.
R//
SELECT AVG(POPULATION) FROM CITY WHERE District = 'California'


Query the average population for all cities in CITY, rounded down to the nearest integer.
R//
SELECT ROUND(AVG(POPULATION),0) FROM CITY 


Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
R//
SELECT SUM(POPULATION) FROM CITY WHERE COUNTRYCODE = "JPN"


Query the difference between the maximum and minimum populations in CITY.
R//
SELECT MAX(POPULATION) - MIN(POPULATION) FROM CITY


Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, 
but did not realize her keyboard's  0 key was broken until after completing the calculation. She wants your help 
finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
R//
SELECT ROUND(AVG(Salary)) -  ROUND(AVG(REPLACE(Salary, 0, ''))) FROM EMPLOYEES


We define an employee's total earnings to be their monthly SALARY*MONTHS worked, and the maximum total earnings to be the maximum 
total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees 
as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.
R//
SELECT MAX(salary*months), COUNT(salary*months) FROM Employee GROUP BY salary*months
ORDER BY salary*months 
DESC
LIMIT 1


Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of 2 decimal places.
R//
SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2) FROM STATION


Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2346. 
Truncate your answer to  decimal places.
R//
SELECT ROUND(SUM(LAT_N),4) FROM STATION WHERE LAT_N>38.7880 AND LAT_N<137.2345


Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 134.2345. 
Truncate your answer to  decimal places.
R//
SELECT ROUND(MAX(LAT_N),4) FROM STATION WHERE LAT_N<137.2345


Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. 
Round your answer to 4 decimal places.
R//
SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N<137.2345 ORDER BY LAT_N DESC LIMIT 1


Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.
R//
SELECT ROUND(MIN(LAT_N),4) FROM STATION WHERE LAT_N>38.7780


Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. 
Round your answer to 4 decimal places.
R//
SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N>38.7780 ORDER BY LAT_N ASC LIMIT 1


Consider pi(a,b) and p2(c,d) to be two points on a 2D plane.
 a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.
R//
SELECT ROUND(MAX(LAT_N)-MIN(LAT_N)+MAX(LONG_W)-MIN(LONG_W),4)
FROM STATION 


Consider p1(a,c) and p2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) 
and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points p1 and p2 and format your answer to display 4 decimal digits.
R//
SELECT ROUND(SQRT(POWER(MAX(LAT_N)-MIN(LAT_N),2)+POWER(MAX(LONG_W)-MIN(LONG_W),2)),4)
FROM STATION


A median is defined as a number separating the higher half of a data set from the lower half. 
Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
R//
WITH a AS (
  SELECT LAT_N, ROW_NUMBER() OVER (ORDER BY LAT_N) AS b
  FROM STATION
)
SELECT
  CASE
    WHEN (SELECT COUNT(*) FROM a) % 2 <> 0 THEN round((SELECT LAT_N FROM a WHERE b = CEILING((SELECT MAX(b) FROM a)/2)),4)
    WHEN (SELECT COUNT(*) FROM a) % 2 = 0 THEN round((SELECT AVG(LAT_N) FROM a WHERE b IN ((SELECT MAX(b) FROM a)/2, (SELECT MAX(b) FROM a)/2 + 1)),4)
  END AS Median
FROM a
limit 1;